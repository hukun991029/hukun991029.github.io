<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Axios的封装</title>
      <link href="/2022/05/20/Axios%E7%9A%84%E5%B0%81%E8%A3%85/"/>
      <url>/2022/05/20/Axios%E7%9A%84%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Axios封装"><a href="#Axios封装" class="headerlink" title="Axios封装"></a>Axios封装</h2><h3 id="Axios-是一个基于-promise-的-HTTP-库，可以用在浏览器和-node-js-中。"><a href="#Axios-是一个基于-promise-的-HTTP-库，可以用在浏览器和-node-js-中。" class="headerlink" title="Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。"></a>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</h3><h3 id="使用npm"><a href="#使用npm" class="headerlink" title="使用npm"></a>使用npm</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure><h3 id="使用-bower"><a href="#使用-bower" class="headerlink" title="使用 bower:"></a>使用 bower:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ bower install axios</span><br></pre></td></tr></table></figure><h3 id="使用-cdn"><a href="#使用-cdn" class="headerlink" title="使用 cdn:"></a>使用 cdn:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="封装为class"><a href="#封装为class" class="headerlink" title="封装为class"></a>封装为class</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//request.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> type &#123; <span class="title class_">AxiosInstance</span>, <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Request</span> &#123;</span><br><span class="line">    <span class="attr">instance</span>: <span class="title class_">AxiosInstance</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">options: AxiosRequestConfig</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span> = axios.<span class="title function_">create</span>(options);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">            <span class="function">(<span class="params">res: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="attr">token</span>: string = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;Authorization&#x27;</span>) || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (token) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = token;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全局请求拦截器&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params">err: any</span>) =&gt;</span> err</span><br><span class="line">        );</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">            <span class="comment">// 因为我们接口的数据都在res.data下，所以我们直接返回res.data</span></span><br><span class="line">            <span class="function">(<span class="params">res: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全局响应拦截器&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params">err: any</span>) =&gt;</span> err</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    request&lt;T&gt;(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>&lt;T&gt;): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;T&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">instance</span></span><br><span class="line">                .<span class="property">request</span>&lt;any, T&gt;(config)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(res);</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(err);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Request</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实例化class"><a href="#实例化class" class="headerlink" title="实例化class"></a>实例化class</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Request</span> <span class="keyword">from</span> <span class="string">&#x27;./request&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> http = <span class="keyword">new</span> <span class="title class_">Request</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_BASE_URL</span> <span class="keyword">as</span> string,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">5</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> params = &#123;</span><br><span class="line">        <span class="attr">limit</span>: <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> http.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/search&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        params</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大子数组和</title>
      <link href="/2022/04/19/leetcode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
      <url>/2022/04/19/leetcode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="leetcode-53：最大子数组和"><a href="#leetcode-53：最大子数组和" class="headerlink" title="leetcode  53：最大子数组和"></a>leetcode  53：最大子数组和</h3><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<strong>子数组</strong> 是数组中的一个连续部分</p><p><strong>示例 1：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：nums = [-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：连续子数组 [<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>] 的和最大，为 <span class="number">6</span> 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">输出：<span class="number">23</span></span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">var</span> maxSubArray = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">     <span class="keyword">let</span> max = nums[<span class="number">0</span>];</span><br><span class="line">     <span class="keyword">let</span> maxSum = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         maxSum = <span class="title class_">Math</span>.<span class="title function_">max</span>(nums[i], maxSum + nums[i]);</span><br><span class="line">         max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max, maxSum);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> max;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode 119:杨辉三角II</title>
      <link href="/2022/04/19/leetCode-119-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92II/"/>
      <url>/2022/04/19/leetCode-119-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92II/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="leetcode-119：杨辉三角II"><a href="#leetcode-119：杨辉三角II" class="headerlink" title="leetcode 119：杨辉三角II"></a>leetcode 119：杨辉三角II</h3><p>给定一个非负索引 <code>rowIndex</code>，返回「杨辉三角」的第 <code>rowIndex</code> 行。在「杨辉三角」中，每个数是它左上方和右上方的数的和</p><p><img src="/images/pascal-triangle.gif" alt="pascal-triangle"></p><p><strong>示例 1:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入: rowIndex = <span class="number">3</span></span><br><span class="line">输出: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入: rowIndex = <span class="number">0</span></span><br><span class="line">输出: [<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入: rowIndex = <span class="number">1</span></span><br><span class="line">输出: [<span class="number">1</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">rowIndex</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> getRow = <span class="keyword">function</span> (<span class="params">rowIndex</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= rowIndex; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> row = <span class="keyword">new</span> <span class="title class_">Array</span>(i + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">                row[j] = res[i - <span class="number">1</span>][j - <span class="number">1</span>] + res[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="title function_">push</span>(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res[rowIndex];</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode 509:斐波那契数列</title>
      <link href="/2022/04/19/leetCode-509-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
      <url>/2022/04/19/leetCode-509-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="leetcode-509：斐波那契数列"><a href="#leetcode-509：斐波那契数列" class="headerlink" title="leetcode 509：斐波那契数列"></a>leetcode 509：斐波那契数列</h3><p><strong>斐波那契数</strong> （通常用 <code>F(n)</code> 表示）形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 <code>0</code> 和 <code>1</code> 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">F</span>(<span class="number">0</span>) = <span class="number">0</span>，<span class="title function_">F</span>(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line"><span class="title function_">F</span>(n) = <span class="title function_">F</span>(n - <span class="number">1</span>) + <span class="title function_">F</span>(n - <span class="number">2</span>)，其中 n &gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：<span class="title function_">F</span>(<span class="number">2</span>) = <span class="title function_">F</span>(<span class="number">1</span>) + <span class="title function_">F</span>(<span class="number">0</span>) = <span class="number">1</span> + <span class="number">0</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：<span class="title function_">F</span>(<span class="number">3</span>) = <span class="title function_">F</span>(<span class="number">2</span>) + <span class="title function_">F</span>(<span class="number">1</span>) = <span class="number">1</span> + <span class="number">1</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">4</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：<span class="title function_">F</span>(<span class="number">4</span>) = <span class="title function_">F</span>(<span class="number">3</span>) + <span class="title function_">F</span>(<span class="number">2</span>) = <span class="number">2</span> + <span class="number">1</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> fib = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fib</span>(n - <span class="number">1</span>) + <span class="title function_">fib</span>(n - <span class="number">2</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode 1646:获取生成数组中的最大值</title>
      <link href="/2022/04/19/leetCode-1646-%E8%8E%B7%E5%8F%96%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
      <url>/2022/04/19/leetCode-1646-%E8%8E%B7%E5%8F%96%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="leetcode-1646-获取生成数组中的最大值"><a href="#leetcode-1646-获取生成数组中的最大值" class="headerlink" title="leetcode 1646:获取生成数组中的最大值"></a>leetcode 1646:获取生成数组中的最大值</h3><p>给你一个整数 <code>n</code> 。按下述规则生成一个长度为 <code>n + 1</code> 的数组 <code>nums</code> ：返回生成数组 <code>nums</code> 中的 <strong>最大</strong> 值。</p><p><strong>示例 1：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">7</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：根据规则：</span><br><span class="line">  nums[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">  nums[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">  nums[(<span class="number">1</span> * <span class="number">2</span>) = <span class="number">2</span>] = nums[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">  nums[(<span class="number">1</span> * <span class="number">2</span>) + <span class="number">1</span> = <span class="number">3</span>] = nums[<span class="number">1</span>] + nums[<span class="number">2</span>] = <span class="number">1</span> + <span class="number">1</span> = <span class="number">2</span></span><br><span class="line">  nums[(<span class="number">2</span> * <span class="number">2</span>) = <span class="number">4</span>] = nums[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">  nums[(<span class="number">2</span> * <span class="number">2</span>) + <span class="number">1</span> = <span class="number">5</span>] = nums[<span class="number">2</span>] + nums[<span class="number">3</span>] = <span class="number">1</span> + <span class="number">2</span> = <span class="number">3</span></span><br><span class="line">  nums[(<span class="number">3</span> * <span class="number">2</span>) = <span class="number">6</span>] = nums[<span class="number">3</span>] = <span class="number">2</span></span><br><span class="line">  nums[(<span class="number">3</span> * <span class="number">2</span>) + <span class="number">1</span> = <span class="number">7</span>] = nums[<span class="number">3</span>] + nums[<span class="number">4</span>] = <span class="number">2</span> + <span class="number">1</span> = <span class="number">3</span></span><br><span class="line">因此，nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]，最大值 <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：根据规则，nums[<span class="number">0</span>]、nums[<span class="number">1</span>] 和 nums[<span class="number">2</span>] 之中的最大值是 <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：根据规则，nums[<span class="number">0</span>]、nums[<span class="number">1</span>]、nums[<span class="number">2</span>] 和 nums[<span class="number">3</span>] 之中的最大值是 <span class="number">2</span></span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getMaximumGenerated = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> nums = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> min = <span class="title class_">Math</span>.<span class="title function_">floor</span>(i / <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">let</span> max = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(i / <span class="number">2</span>);</span><br><span class="line">                nums[i] = nums[min] + nums[max];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[i] = nums[i / <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...nums);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode 118:杨辉三角</title>
      <link href="/2022/04/19/leetCode-118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
      <url>/2022/04/19/leetCode-118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="leetcode-118-杨辉三角"><a href="#leetcode-118-杨辉三角" class="headerlink" title="leetcode 118:杨辉三角"></a>leetcode 118:杨辉三角</h3><p>给定一个非负整数 <em><code>numRows</code>，</em>生成「杨辉三角」的前 <em><code>numRows</code></em> 行。在「杨辉三角」中，每个数是它左上方和右上方的数的和。</p><p><img src="/images/pascal-triangle.gif" alt="pascal-triangle"></p><p><strong>示例 1:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入: numRows = <span class="number">5</span></span><br><span class="line">输出: [[<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入: numRows = <span class="number">1</span></span><br><span class="line">输出: [[<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p><strong>代码实现</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">numRows</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> generate = <span class="keyword">function</span>(<span class="params">numRows</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> res = []</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">          <span class="comment">//将内部数组全部填充1</span></span><br><span class="line">        <span class="keyword">let</span> row = <span class="keyword">new</span> <span class="title class_">Array</span>(i + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">          row[j] = res[i - <span class="number">1</span>][j - <span class="number">1</span>] + res[i - <span class="number">1</span>][j]</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">push</span>(row)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode 70:爬楼梯</title>
      <link href="/2022/04/19/leetCode-70-%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
      <url>/2022/04/19/leetCode-70-%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="leetcode-70-爬楼梯"><a href="#leetcode-70-爬楼梯" class="headerlink" title="leetcode 70:爬楼梯"></a><code>leetcode</code> 70:爬楼梯</h3><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>示例 1：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line"><span class="number">1.</span> <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span> <span class="number">2</span> 阶</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line"><span class="number">1.</span> <span class="number">1</span> 阶 + <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span> <span class="number">1</span> 阶 + <span class="number">2</span> 阶</span><br><span class="line"><span class="number">3.</span> <span class="number">2</span> 阶 + <span class="number">1</span> 阶</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> res=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line">       res[i]=res[i-<span class="number">1</span>]+res[i-<span class="number">2</span>]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res[n-<span class="number">1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pinia</title>
      <link href="/2022/04/19/Pinia%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/19/Pinia%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vue全局状态管理：Pinia"><a href="#Vue全局状态管理：Pinia" class="headerlink" title="Vue全局状态管理：Pinia"></a>Vue全局状态管理：Pinia</h1><h2 id="一、为什么要使用-Pinia？"><a href="#一、为什么要使用-Pinia？" class="headerlink" title="一、为什么要使用 Pinia？"></a>一、为什么要使用 Pinia？</h2><h3 id="Pinia-是-Vue-的存储库，它允许您跨组件-x2F-页面共享状态。"><a href="#Pinia-是-Vue-的存储库，它允许您跨组件-x2F-页面共享状态。" class="headerlink" title="Pinia 是 Vue 的存储库，它允许您跨组件&#x2F;页面共享状态。"></a>Pinia 是 Vue 的存储库，它允许您跨组件&#x2F;页面共享状态。</h3><ol><li>开发工具支持    <ol><li>跟踪动作、突变的时间表</li><li>商店出现在使用它们的组件中</li><li>时间旅行和更容易的调试</li></ol></li><li>热模块更换  <ol><li>在不重新加载页面的情况下修改您的商店</li><li>在开发时保持任何现有状态</li></ol></li><li>使用插件扩展 Pinia 功能</li><li>为 JS 用户提供适当的 TypeScript 支持或自动完成功能</li><li>服务器端渲染支持</li></ol><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yarn add pinia</span><br><span class="line"># or <span class="keyword">with</span> npm</span><br><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br></pre></td></tr></table></figure><p>如果您使用的是 Vue 2，您还需要安装一个插件并在<code>pinia</code>应用程序的根目录注入创建的插件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia, <span class="title class_">PiniaVuePlugin</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">PiniaVuePlugin</span>)</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"> multiple <span class="title class_">Vue</span> apps on</span><br><span class="line">  pinia,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><p>在使用之前我们应该知道并非所有应用程序都需要访问全局状态。存储应该包含可以在整个应用程序中访问的数据。这包括在许多地方使用的数据，例如在导航栏中显示的用户信息，以及需要通过页面保存的数据。</p><ol><li><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><p>Store 是一个保存状态和业务逻辑的实体，可以自由读取和写入，并通过导入后在 setup 中使用</p><ol><li><h4 id="创建一个-store"><a href="#创建一个-store" class="headerlink" title="创建一个 store"></a>创建一个 store</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia</span></span><br><span class="line"><span class="string">const useCounterStore = defineStore(&#x27;</span>counterStore<span class="string">&#x27;, &#123;</span></span><br><span class="line"><span class="string">  state: () =&gt; (&#123;</span></span><br><span class="line"><span class="string">    counter: </span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure></li><li><h4 id="在其他页面使用Store"><a href="#在其他页面使用Store" class="headerlink" title="在其他页面使用Store"></a>在其他页面使用Store</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">//*** 代表此处你本地文件的路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">useCounterStore</span>()</span><br><span class="line"><span class="comment">// 此处可以通过解构赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123;counter&#125;=store</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="重置Store"><a href="#重置Store" class="headerlink" title="重置Store"></a>重置Store</h4><p>您可以通过调用store 上的方法将状态<em>重置</em>为其初始值：<code>$reset()</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">//*** 代表此处你本地文件的路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">useCounterStore</span>()</span><br><span class="line">store.$reset()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="更新Store"><a href="#更新Store" class="headerlink" title="更新Store"></a>更新Store</h4><ol><li><p>直接更改store的属性    </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">//*** 代表此处你本地文件的路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">useCounterStore</span>()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;()=&gt;&#123;store.counter++&#125;&#x27;</span>&gt;</span>点击改变counter<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>通过$patch方法</p><p>接收对象的方式允许对部分对象同时应用多个更改：但是，使用这种语法应用某些突变确实很难或成本很高：任何集合修改（例如，从数组中推送、删除、拼接元素）都需要创建一个新集合。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">//*** 代表此处你本地文件的路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">useCounterStore</span>()</span><br><span class="line">store.$patch(&#123;</span><br><span class="line">  <span class="attr">counter</span>: store.<span class="property">counter</span> + <span class="number">1</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收函数的方式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">//*** 代表此处你本地文件的路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">useCounterStore</span>()</span><br><span class="line">store.$patch(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">state.<span class="property">items</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;shoes&#x27;</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;)</span><br><span class="line">state.<span class="property">hasChanged</span> = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="更换state"><a href="#更换state" class="headerlink" title="更换state"></a>更换state</h4></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">//*** 代表此处你本地文件的路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">useCounterStore</span>()</span><br><span class="line">store.<span class="property">$state</span> = &#123; <span class="attr">counter</span>: <span class="number">666</span>, <span class="attr">name</span>: <span class="string">&#x27;Paimon&#x27;</span> &#125;</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure></li><li><h3 id="使用Getters"><a href="#使用Getters" class="headerlink" title="使用Getters"></a>使用Getters</h3><ol><li>Getter 完全等同于 Store 状态的计算值。 它们可以用 <code>defineStore()</code> 中的 <code>getters</code> 属性定义。 他们接收“状态”作为第一个参数</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">counter</span> * <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><h4 id="使用其他-getter"><a href="#使用其他-getter" class="headerlink" title="使用其他 getter"></a>使用其他 getter</h4></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 自动将返回类型推断为数字</span></span><br><span class="line">    <span class="title function_">doubleCount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">counter</span> * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 返回类型必须明确设置</span></span><br><span class="line">    <span class="title function_">doublePlusOne</span>(): number &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">counter</span> * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在模板中使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Double count is &#123;&#123; store.doubleCount &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123; store &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4></li></ol><p>Getters 只是幕后的 computed 属性，因此无法向它们传递任何参数。 但是，您可以从 getter返回一个函数以接受任何参数：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">getUserById</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">userId</span>) =&gt;</span> state.<span class="property">users</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">id</span> === userId)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在模板中使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">getUserById</span>: store.<span class="property">getUserById</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>User 2: &#123;&#123; getUserById(2) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><h3 id="使用Actions"><a href="#使用Actions" class="headerlink" title="使用Actions"></a>使用Actions</h3><p>Actions 相当于组件中的方法，它们可以使用 <code>defineStore()</code> 中的 <code>actions</code> 属性定义并且它们非常适合定义业务逻辑。与getters一样，操作可以通过 this访问并且actions可以是异步的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">counter</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">randomizeCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">counter</span> = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">100</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="keyword">async</span> <span class="title function_">registerUser</span>(<span class="params">login, password</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userData</span> = <span class="keyword">await</span> api.<span class="title function_">post</span>(&#123; login, password &#125;)</span><br><span class="line">        <span class="title function_">showTooltip</span>(<span class="string">`Welcome back <span class="subst">$&#123;<span class="variable language_">this</span>.userData.name&#125;</span>!`</span>)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="title function_">showTooltip</span>(error)</span><br><span class="line">        <span class="comment">// 让表单组件显示错误</span></span><br><span class="line">        <span class="keyword">return</span> error</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在模板中使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span><br><span class="line">    store.<span class="title function_">randomizeCounter</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pinia </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
