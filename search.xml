<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端下载文件</title>
      <link href="/2022/06/16/%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
      <url>/2022/06/16/%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前端下载文件"><a href="#前端下载文件" class="headerlink" title="前端下载文件"></a>前端下载文件</h2><h3 id="1-form表单提交"><a href="#1-form表单提交" class="headerlink" title="1.form表单提交"></a>1.form表单提交</h3><p>为一个下载按钮添加<code>click</code>事件，点击时动态生成一个表单，利用表单提交的功能来实现文件的下载（实际上表单的提交就是发送一个请求）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">path</span> - 请求的地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">fileName</span> - 文件名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">downloadFile</span> (downloadUrl, fileName) &#123;</span><br><span class="line">    <span class="comment">// 创建表单</span></span><br><span class="line">    <span class="keyword">const</span> formObj = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line">    formObj.<span class="property">action</span> = downloadUrl;</span><br><span class="line">    formObj.<span class="property">method</span> = <span class="string">&#x27;get&#x27;</span>;</span><br><span class="line">    formObj.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    <span class="comment">// 创建input，主要是起传参作用</span></span><br><span class="line">    <span class="keyword">const</span> formItem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">    formItem.<span class="property">value</span> = fileName; <span class="comment">// 传参的值</span></span><br><span class="line">    formItem.<span class="property">name</span> = <span class="string">&#x27;fileName&#x27;</span>; <span class="comment">// 传参的字段名</span></span><br><span class="line">    <span class="comment">// 插入到网页中</span></span><br><span class="line">    formObj.<span class="title function_">appendChild</span>(formItem);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(formObj);</span><br><span class="line">    formObj.<span class="title function_">submit</span>(); <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(formObj); <span class="comment">// 发送完清除掉</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>传统方式，兼容性好，不会出现URL长度限制问题</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>无法知道下载的进度</li><li>无法直接下载浏览器可直接预览的文件类型（如txt&#x2F;png等）</li></ul><h3 id="2-window-open或location-href"><a href="#2-window-open或location-href" class="headerlink" title="2.window.open或location.href"></a>2.window.open或location.href</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;downloadFile.zip&#x27;</span>);</span><br><span class="line"></span><br><span class="line">location.<span class="property">href</span> = <span class="string">&#x27;downloadFile.zip&#x27;</span>;</span><br></pre></td></tr></table></figure><p>地址可以是接口api的地址，而不单纯是个链接地址。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>简单方便直接</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>会出现URL长度限制问题</li><li>需要注意url编码问题</li><li>浏览器可直接浏览的文件类型是不提供下载的，如txt、png、jpg、gif等</li><li>不能添加header，也就不能进行鉴权</li><li>无法知道下载的进度</li></ul><h3 id="3-a标签的download"><a href="#3-a标签的download" class="headerlink" title="3.a标签的download"></a>3.a标签的download</h3><p><code>a</code>标签可以访问下载文件的地址，浏览器帮助进行下载。但是对于浏览器支持直接浏览的txt、png、jpg、gif等文件，是不提供直接下载（可右击从菜单里另存为）的。为了解决这个直接浏览不下载的问题，可以利用<code>download</code>属性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;example.jpg&quot;</span> download&gt;点击下载&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>可以带上属性值，指定下载的文件名，即重命名下载文件。不设置的话默认是文件原本名。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;example.jpg&quot; download=&quot;test&quot;&gt;点击下载&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>下载了一个名叫<code>test</code>的图片</p><p><strong>监测是否支持download</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isSupport = <span class="string">&#x27;download&#x27;</span> <span class="keyword">in</span> <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul><li>能解决不能直接下载浏览器可浏览的文件</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>得已知下载文件地址</li><li>不能下载跨域下的浏览器可浏览的文件</li><li>有兼容性问题，特别是IE</li><li>不能进行鉴权</li></ul><h2 id="4-利用Blob对象"><a href="#4-利用Blob对象" class="headerlink" title="4.利用Blob对象"></a>4.利用Blob对象</h2><p>该方法较上面的直接使用<code>a</code>标签<code>download</code>这种方法的优势在于，它除了能利用已知文件地址路径进行下载外，还能通过发送ajax请求api获取文件流进行下载。毕竟有些时候，后端不会直接提供一个下载地址给你直接访问，而是要调取api。利用<code>Blob</code>对象可以将文件流转化成<code>Blob</code>二进制对象。该对象兼容性良好，需要注意的是</p><ul><li>IE10以下不支持。</li><li>在Safari浏览器上访问<code>Blob Url</code>或<code>Object URL</code>当前是有缺陷的，如下文中通过<code>URL.createObjectURL</code>生成的链接。</li></ul><p>进行下载的思路很简单：发请求获取二进制数据，转化为<code>Blob</code>对象，利用<code>URL.createObjectUrl</code>生成url地址，赋值在<code>a</code>标签的<code>href</code>属性上，结合<code>download</code>进行下载。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 下载文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">path</span> - 下载地址/下载请求地址。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">name</span> - 下载文件的名字/重命名（考虑到兼容性问题，最好加上后缀名）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">downloadFile (path, name) &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, path);</span><br><span class="line">    xhr.<span class="property">responseType</span> = <span class="string">&#x27;blob&#x27;</span>;</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span> || <span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是IE10及以上，不支持download属性，采用msSaveOrOpenBlob方法，但是IE10以下也不支持msSaveOrOpenBlob</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;msSaveOrOpenBlob&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">                navigator.<span class="title function_">msSaveOrOpenBlob</span>(<span class="variable language_">this</span>.<span class="property">response</span>, name);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// const blob = new Blob([this.response], &#123; type: xhr.getResponseHeader(&#x27;Content-Type&#x27;) &#125;);</span></span><br><span class="line">            <span class="comment">// const url = URL.createObjectURL(blob);</span></span><br><span class="line">            <span class="keyword">const</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">            <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            a.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">            a.<span class="property">href</span> = url;</span><br><span class="line">            a.<span class="property">download</span> = name;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">            a.<span class="title function_">click</span>();</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a);</span><br><span class="line">            <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法不能缺少<code>a</code>标签的<code>download</code>属性的设置。因为发请求时已设置返回数据类型为<code>Blob</code>类型（<code>xhr.responseType = &#39;blob&#39;</code>），所以<code>target.response</code>就是一个<code>Blob</code>对象，打印出来会看到两个属性<code>size</code>和<code>type</code>。虽然<code>type</code>属性已指定了文件的类型，但是为了稳妥起见，还是在<code>download</code>属性值里指定后缀名，如Firefox不指定下载下来的文件就会不识别类型。</p><p>大家可能会注意到，上述代码有两处注释，其实除了上述的写法外，还有另一个写法，改动一丢丢。如果发送请求时不设置<code>xhr.responseType = &#39;blob&#39;</code>，默认ajax请求会返回<code>DOMString</code>类型的数据，即字符串。这时就需要两处注释的代码了，对返回的文本转化为<code>Blob</code>对象，然后创建blob url，此时需要注释掉原本的<code>const url = URL.createObjectURL(target.response)</code>。</p><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ul><li>能解决不能直接下载浏览器可浏览的文件</li><li>可设置header，也就可添加鉴权信息</li></ul><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ul><li>兼容性问题，IE10以下不可用；Safari浏览器可以留意下使用情况</li></ul><h2 id="5-base64"><a href="#5-base64" class="headerlink" title="5.base64"></a>5.base64</h2><p>用法跟上面用<code>Blob</code>大同小异，基本上思路是一样的，唯一不同的是，上面是利用<code>Blob</code>对象生成<code>Blob URL</code>，而这里则是生成<code>Data URL</code>，所谓<code>Data URL</code>，就是<code>base64</code>编码后的url形式。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">path</span> - 下载地址/下载请求地址。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">name</span> - 下载文件的名字（考虑到兼容性问题，最好加上后缀名）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">downloadFile (path, name) &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, path);</span><br><span class="line">    xhr.<span class="property">responseType</span> = <span class="string">&#x27;blob&#x27;</span>;</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span> || <span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">            fileReader.<span class="title function_">readAsDataURL</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">            fileReader.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                a.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">                a.<span class="property">href</span> = <span class="variable language_">this</span>.<span class="property">result</span>;</span><br><span class="line">                a.<span class="property">download</span> = name;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">                a.<span class="title function_">click</span>();</span><br><span class="line">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h3><ul><li>能解决不能直接下载浏览器可浏览的文件</li><li>可设置header，也就可添加鉴权信息</li></ul><h3 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h3><ul><li>兼容性问题，IE10以下不可用</li></ul><h3 id="关于文件名"><a href="#关于文件名" class="headerlink" title="关于文件名"></a>关于文件名</h3><p>有时候我们在发送下载请求之前，并不知道文件名，或者文件名是后端提供的，我们就要想办法获取。</p><h3 id="Content-Disposition"><a href="#Content-Disposition" class="headerlink" title="Content-Disposition"></a>Content-Disposition</h3><p>当返回文件流的时候，我们在浏览器上观察接口返回的信息，会看到有这么一个header：<code>Content-Disposition</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ontent-<span class="title class_">Disposition</span>: attachment; filename=<span class="title class_">CMCoWork</span>__________20200323151823_190342.<span class="property">xlsx</span>; filename*=<span class="variable constant_">UTF</span>-<span class="number">8</span><span class="string">&#x27;&#x27;</span><span class="title class_">CMCoWork</span>_%<span class="variable constant_">E4</span></span><br></pre></td></tr></table></figure><p>其中包含了文件名，我们可以想办法获取其中的文件名。我们看到，有<code>filename=</code>和<code>filename*=</code>，后者不一定有，在旧版浏览器中或个别浏览器中，会不支持这种形式，<code>filename*</code>采用了<code>RFC 5987</code>中规定的编码方式。</p><p>所以你要获取文件名，就变成，截取这段字符串中的这两个字段值了。</p><p>看上面的例子大家可能发现，怎么值怪怪的。是的，如果名字是英文，那好办， 如果是有中文或者其他特殊符号，是需要处理好编码的</p><ul><li><code>filename</code>，需要后端处理好编码形式，但是就算后端处理好了，也会应每个浏览器的不同，解析的情况也不同。是个比较难处理好的家伙，所以才有后面的<code>filename*</code></li><li><code>filename*</code>，是个现代浏览器支持的，为了解决<code>filename</code>的不足，一般是<code>UTF-8</code>，我们用<code>decodeURIComponent</code>就能解码了，能还原成原本的样子。当然，解码前你要把值中的<code>UTF-8&#39;&#39;</code>这种部分给去掉。</li></ul><p>所以，在我们实现之前，我们就要明白，取<code>Content-Disposition</code>的内容，并不是百分百能符合你预期的，除非你的文件名全是英文数字。</p><p>我们提取文件名值：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// xhr是XMLHttpRequest对象</span></span><br><span class="line"><span class="keyword">const</span> content = xhr.<span class="title function_">getResponseHeader</span>(<span class="string">&#x27;content-disposition&#x27;</span>); <span class="comment">// 注意是全小写，自定义的header也是全小写</span></span><br><span class="line"><span class="keyword">if</span> (content) &#123;</span><br><span class="line">    <span class="keyword">let</span> name1 = content.<span class="title function_">match</span>(<span class="regexp">/filename=(.*);/</span>)[<span class="number">1</span>]; <span class="comment">// 获取filename的值</span></span><br><span class="line">    <span class="keyword">let</span> name2 = content.<span class="title function_">match</span>(<span class="regexp">/filename\*=(.*)/</span>)[<span class="number">1</span>]; <span class="comment">// 获取filename*的值</span></span><br><span class="line">    name1 = <span class="built_in">decodeURIComponent</span>(name1);</span><br><span class="line">    name2 = <span class="built_in">decodeURIComponent</span>(name2.<span class="title function_">substring</span>(<span class="number">6</span>)); <span class="comment">// 这个下标6就是UTF-8&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>上面我们获得了两个文件名<code>name1,name2</code>，如果两个都存在，那么我们优先取<code>name2</code>的，因为这个更靠谱，<code>name1</code>如果包含中文或特殊符号，就有风险还原不了真正的文件名。</p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ul><li>非全数字英文的文件名，如果浏览器只支持<code>filename</code>，获取的文件名编码可能会有问题。</li></ul><h3 id="自定义header"><a href="#自定义header" class="headerlink" title="自定义header"></a>自定义header</h3><p>本质上跟上述的<code>Content-Disposition</code>差不多，只是我们这里不使用默认的header，我们自己自定义一个<code>response header</code>，跟后端决定好编码方式返回，前端直接获取这个自定义header，然后使用对应的解码即可，如使用<code>decodeURIComponent</code>。</p><p>但是我们都要知道，在跨域的情况下，前端获取到的header只有默认的6个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。</p><p>所以你想要获取到别的header，需要后端配合，设置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Expose</span>-<span class="title class_">Headers</span>: <span class="title class_">Content</span>-<span class="title class_">Disposition</span>, custom-header</span><br></pre></td></tr></table></figure><p>这样，前端就能获取到对应暴露的header字段，需要注意的是，<code>Content-Disposition</code>也是需要暴露的。</p><h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><p>这里额外提供个方法，该方法作用是，当你知道文件的全名（含后缀名），想要重命名，但是得后缀名一样，来获取后缀名。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findType</span> (name) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = name.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> name.<span class="title function_">substring</span>(index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> downLoadFile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端导出表格</title>
      <link href="/2022/06/16/%E5%89%8D%E7%AB%AF%E5%AF%BC%E5%87%BA%E8%A1%A8%E6%A0%BC/"/>
      <url>/2022/06/16/%E5%89%8D%E7%AB%AF%E5%AF%BC%E5%87%BA%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="前端导出表格"><a href="#前端导出表格" class="headerlink" title="前端导出表格"></a>前端导出表格</h2><h3 id="步骤一：安装依赖"><a href="#步骤一：安装依赖" class="headerlink" title="步骤一：安装依赖"></a>步骤一：安装依赖</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save xlsx file-saver</span><br></pre></td></tr></table></figure><h3 id="步骤二：导入依赖"><a href="#步骤二：导入依赖" class="headerlink" title="步骤二：导入依赖"></a>步骤二：导入依赖</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  * <span class="keyword">as</span> <span class="variable constant_">XLSX</span> <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FileSaver</span> <span class="keyword">from</span> <span class="string">&quot;file-saver&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="步骤三：给表格设置一个id"><a href="#步骤三：给表格设置一个id" class="headerlink" title="步骤三：给表格设置一个id"></a>步骤三：给表格设置一个id</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a-table  id=<span class="string">&quot;table&quot;</span> :dataSource=<span class="string">&quot;dataSource&quot;</span> :columns=<span class="string">&quot;columns&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="步骤四：方法实现导出"><a href="#步骤四：方法实现导出" class="headerlink" title="步骤四：方法实现导出"></a>步骤四：方法实现导出</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">exportTableData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 导出文件名</span></span><br><span class="line">      <span class="keyword">const</span> filename = <span class="string">&quot;导出.xlsx&quot;</span>;</span><br><span class="line">      <span class="comment">// 导出表格加id,通过id获取要导出的表单</span></span><br><span class="line">      <span class="keyword">const</span> wb = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">table_to_book</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;table&quot;</span>));</span><br><span class="line">      <span class="keyword">const</span> wbout = <span class="variable constant_">XLSX</span>.<span class="title function_">write</span>(wb, &#123;</span><br><span class="line">        <span class="attr">bookType</span>: <span class="string">&quot;xlsx&quot;</span>,</span><br><span class="line">        <span class="attr">bookSST</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;array&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title class_">FileSaver</span>.<span class="title function_">saveAs</span>(</span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">Blob</span>([wbout], &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;application/octet-stream&quot;</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">          filename</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> wbout;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Set、WeakSet的使用</title>
      <link href="/2022/06/13/Set%E3%80%81WeakSet%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/06/13/Set%E3%80%81WeakSet%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Set、WeakSet的使用"><a href="#Set、WeakSet的使用" class="headerlink" title="Set、WeakSet的使用"></a>Set、WeakSet的使用</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p><code>Set</code>对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。<code>Set</code>对象是值的集合，你可以按照插入的顺序迭代它的元素。<code>Set</code> 中的元素只会出现一次，即 <code>Set</code> 中的元素是唯一的。因为 <code>Set</code> 中的值总是唯一的，所以需要判断两个值是否相等。在 <code>ECMAScript</code> 规范的早期版本中，这不是基于和&#x3D;&#x3D;&#x3D;操作符中使用的算法相同的算法。具体来说，对于 <code>Set</code>，+0（+0 严格相等于 -0）和 -0 是不同的值。然而，在 <code>ECMAScript 2015</code> 规范中这点已被更改。另外，<code>NaN</code> 和 <code>undefined</code> 都可以被存储在 Set 中，<code>NaN</code> 之间被视为相同的值（<code>NaN</code> 被认为是相同的，尽管 <code>NaN</code> !&#x3D;&#x3D; <code>NaN</code>）。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set) <span class="comment">// &#123;1,2&#125; </span></span><br></pre></td></tr></table></figure><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><table><thead><tr><th align="center">操作方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">add(value)</td><td align="center">向集合中添加一个新的项</td></tr><tr><td align="center">has(key)</td><td align="center">如果值在集合中存在，返回ture, 否则返回false</td></tr><tr><td align="center">size</td><td align="center">返回集合长度</td></tr><tr><td align="center">delete(key)</td><td align="center">从集合中删除一个值</td></tr><tr><td align="center">clear()</td><td align="center">移除集合中的所有项</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>); <span class="comment">// &#123;1&#125;</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">2</span>); <span class="comment">// &#123;1,2&#125;</span></span><br><span class="line">set.<span class="title function_">has</span>(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">set.<span class="title function_">has</span>(<span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">set.<span class="property">size</span>; <span class="comment">// 2</span></span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">1</span>); <span class="comment">// &#123;2&#125;</span></span><br><span class="line">set.<span class="property">size</span>; <span class="comment">// 1</span></span><br><span class="line">set.<span class="title function_">clear</span>(); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><table><thead><tr><th align="center">遍历方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">keys</td><td align="center">返回键名的遍历器</td></tr><tr><td align="center">values</td><td align="center">返回键值的遍历器</td></tr><tr><td align="center">entries</td><td align="center">返回键值对的遍历器</td></tr><tr><td align="center">forEach</td><td align="center">使用回调函数遍历每个成员</td></tr></tbody></table><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line">set.<span class="title function_">keys</span>(); <span class="comment">// &#123;1, 2, 3, 4&#125;</span></span><br><span class="line">set.<span class="title function_">values</span>(); <span class="comment">// &#123;1, 2, 3, 4&#125;</span></span><br><span class="line">set.<span class="title function_">entries</span>(); <span class="comment">// &#123;1 =&gt; 1, 2 =&gt; 2, 3 =&gt; 3, 4 =&gt; 4&#125;</span></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// 1,2,3,4</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//去重  </span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1,2]</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);</span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="keyword">new</span> <span class="title class_">Set</span>([...a], [...b])]); <span class="comment">//  [1, 2, 3, 4, 5, 6];</span></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> b.<span class="title function_">has</span>(item)))]); <span class="comment">// [3,4]</span></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> !b.<span class="title function_">has</span>(item)))]); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p><strong><code>WeakSet</code></strong> 对象允许你将<em>弱保持对象</em>存储在一个集合中, 并且其中的每个对象值都只能出现一次。在<code>WeakSet</code>的集合中是唯一的。<code>WeakSet</code> 的出现主要解决弱引用对象存储的场景, 其结构与<code>Set</code>类似。</p><h3 id="与Set的区别"><a href="#与Set的区别" class="headerlink" title="与Set的区别"></a>与<code>Set</code>的区别</h3><ul><li>与<code>Set</code>相比，<code>WeakSet</code> 只能是对象的集合，而不能是任何类型的任意值。</li><li><code>WeakSet</code>持弱引用：集合中对象的引用为弱引用（弱引用是指不能确保其引用的对象不会被垃圾回收器回收的引用，换句话说就是可能在任意时间被回收）。 如果没有其他的对<code>WeakSet</code>中对象的引用，那么这些对象会被当成垃圾回收掉。 这也意味着 <code>WeakSet</code> 中没有存储当前对象的列表。 正因为这样，<code>WeakSet</code> 是不可枚举的。</li><li><code>WeakSet</code>没有size属性，所以没有办法遍历它的成员,因为其成员都是弱引用，弱引用随时都会消失，遍历机制无法保证成员的存在</li></ul><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">WeakSet</span>([iterable]);</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><code>iterable</code> 只能是或类似数组的对象对象，而不能是其他类型的值。如果传入一个可迭代对象作为参数，则该对象的所有迭代值都会被自动添加进生成的 <code>WeakSet</code> 对象中。<code>null</code> 被认为是 <code>undefined</code>。</li></ul><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">           <span class="keyword">let</span> weakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line">           weakSet.<span class="title function_">add</span>(obj); <span class="comment">// &#123;&#123;&#125;&#125;</span></span><br><span class="line">           weakSet.<span class="title function_">add</span>([[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">2</span>, <span class="number">3</span>]]);<span class="comment">// &#123;&#123;&#125;,[1,2],[2,3]&#125;</span></span><br><span class="line">           weakSet.<span class="title function_">add</span>(<span class="number">1</span>); <span class="comment">// Invalid value used in weak set</span></span><br><span class="line">           weakSet.<span class="title function_">add</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// Invalid value used in weak set</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map、WeakMap的使用</title>
      <link href="/2022/06/13/Map%E3%80%81WeakMap%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/06/13/Map%E3%80%81WeakMap%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Map、WeakMap的使用"><a href="#Map、WeakMap的使用" class="headerlink" title="Map、WeakMap的使用"></a>Map、WeakMap的使用</h2><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><strong><code>Map</code></strong> 对象保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者基本类型）都可以作为一个键或一个值。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>new Map([iterable])</code> <code>Iterable</code> 可以是一个数组或者其他 <code>iterable</code> 对象，其元素为键值对,每个键值对都会添加到新的 <code>Map</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map=<span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><table><thead><tr><th align="center">操作方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">set(key, value)</td><td align="center">向 Map 中加入或更新键值对</td></tr><tr><td align="center">get(key)</td><td align="center">读取 key 对应的值，如果没有，返回 undefined</td></tr><tr><td align="center">has(key)</td><td align="center">某个键是否在 Map 对象中，在返回 true 否则返回 false</td></tr><tr><td align="center">delete(key)</td><td align="center">删除某个键，返回 true, 如果删除失败返回 false</td></tr><tr><td align="center">clear()</td><td align="center">删除所有元素</td></tr></tbody></table><h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><table><thead><tr><th align="center">遍历方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">keys()</td><td align="center">返回键名的遍历器</td></tr><tr><td align="center">values()</td><td align="center">返回键值的遍历器</td></tr><tr><td align="center">entries()</td><td align="center">返回所有成员的遍历器</td></tr><tr><td align="center">forEach()</td><td align="center">遍历 Map 的所有成员</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>new操作符的实现</title>
      <link href="/2022/06/13/new%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/06/13/new%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>new操作符的实现</p><p>使用<code>new</code>时，到底发生了什么</p><ul><li>创建一个空对象，作为将要返回的对象实例</li><li>将这个空对象的原型，指向了构造函数的<code>prototype</code>属性</li><li>将这个空对象赋值给函数内部的<code>this</code>关键字</li><li>开始执行构造函数内部的代码</li><li>如果构造函数返回一个对象，那么就直接返回该对象，否则返回创建的对象</li></ul><p>一个构造函数在通过<code>new</code>操作符后便可以生成一个对象，生成的新对象会绑定到函数调用的<code>this</code>。也就是说，构造函数内部，<code>this</code>指的是一个新生成的空对象，所有针对<code>this</code>的操作，都会发生在这个空对象上。构造函数之所以叫“构造函数”，就是说这个函数的目的，就是操作一个空对象（即<code>this</code>对象），将其“构造”为需要的样子。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            &#125;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 类数组转化数组</span></span><br><span class="line">                <span class="keyword">let</span> arg = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">                <span class="comment">// 拿到构造函数</span></span><br><span class="line">                <span class="keyword">let</span> constructor = arg.<span class="title function_">shift</span>();</span><br><span class="line">                <span class="comment">// 将构造函数的prototype指向对象的__proto__</span></span><br><span class="line">                <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(constructor.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">                <span class="comment">// 将this指向对象并执行函数</span></span><br><span class="line">                <span class="keyword">let</span> res = constructor.<span class="title function_">apply</span>(obj, arg);</span><br><span class="line">                <span class="keyword">return</span> res || obj;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myNew</span>(<span class="title class_">Person</span>, <span class="string">&#x27;张三&#x27;</span>)); <span class="comment">// Person &#123;name: &#x27;张三&#x27;&#125;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myNew</span>(sum, <span class="number">5</span>, <span class="number">8</span>)); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原型与原型链</title>
      <link href="/2022/06/13/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2022/06/13/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><p><img src="/images/yuanxinlian.awebp" alt="yuanxinlian"></p><ul><li>属性<code>__proto__</code>是一个对象【实例通过<code>__proto__</code>隐式原型指向其原型对象】，它有两个属性，<code>constructor</code>和<code>__proto__</code>；</li><li>原型对象有一个默认的<code>constructor</code>属性，用于记录实例是由哪个构造函数创建；</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;say&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">            p.<span class="title function_">say</span>()</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 构造函数有一个 prototype 属性引用其原型对象，而这个原型对象也有一个constructor 属性，引用这个构造函数,两者循环引用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>defineproperty的使用</title>
      <link href="/2022/06/13/defineproperty%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/06/13/defineproperty%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="defineproperty"><a href="#defineproperty" class="headerlink" title="defineproperty"></a>defineproperty</h2><p>Object.defineProperty 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象</p><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><ul><li>obj 要定义属性的对象</li><li>prop 要定义或修改的属性的名称</li><li>descriptor 要定义或修改的属性描述符</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">value</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">                <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">//是否可写</span></span><br><span class="line">                <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">// 是否可配置</span></span><br><span class="line">                <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">// 是否可枚举</span></span><br><span class="line">            &#125;);</span><br><span class="line">obj.<span class="property">name</span> <span class="comment">// 张三</span></span><br></pre></td></tr></table></figure><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><ul><li>get</li><li>set</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">get</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">set</span>:<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">                name=value</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">//是否可写</span></span><br><span class="line">                <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">// 是否可配置</span></span><br><span class="line">                <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">// 是否可枚举</span></span><br><span class="line">            &#125;);</span><br><span class="line">obj.<span class="property">name</span> <span class="comment">// 10</span></span><br><span class="line">obj.<span class="property">name</span>=<span class="string">&#x27;李四&#x27;</span><span class="comment">// 李四</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6的代理模式 ｜ Proxy</title>
      <link href="/2022/05/26/ES6%E7%9A%84%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8FProxy/"/>
      <url>/2022/05/26/ES6%E7%9A%84%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8FProxy/</url>
      
        <content type="html"><![CDATA[<p><strong>Proxy</strong> 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handle)</span><br></pre></td></tr></table></figure><ul><li>target 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理</li><li>handler 一个通常以函数作为属性的对象，用来定制拦截行为</li></ul><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p>下方代码给obj设置了代理所有的get请求都会返回return的数值20。需要注意的是，代理只会对<code>proxy</code>对象生效，如上方的<code>obj</code>就没有任何效果 </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">num</span>: <span class="number">10</span> &#125;;</span><br><span class="line">  <span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">      <span class="attr">get</span>: <span class="function">(<span class="params">target, propKey, receiver</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(target, propKey, receiver);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">set</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">num</span>); <span class="comment">// 20</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">num</span>); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>get方法有三个参数  (target, propKey, ?receiver) </p><ul><li>target 目标对象</li><li>propkey 属性名</li><li>receiver Proxy 实例本身</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="function">(<span class="params">target, key</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (key <span class="keyword">in</span> target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> target[key];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">`error`</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">name</span>); <span class="comment">// &#x27;张三&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">a</span>); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h3 id="handle对象常用的方法"><a href="#handle对象常用的方法" class="headerlink" title="handle对象常用的方法"></a>handle对象常用的方法</h3><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">handler.has()</td><td align="center">in 操作符的捕捉器。</td></tr><tr><td align="center">handler.get()</td><td align="center">属性读取操作的捕捉器。</td></tr><tr><td align="center">handler.set()</td><td align="center">属性设置操作的捕捉器。</td></tr><tr><td align="center">handler.deleteProperty()</td><td align="center">delete 操作符的捕捉器。</td></tr><tr><td align="center">handler.ownKeys()</td><td align="center">Object.getOwnPropertyNames 方法和 Object.getOwnPropertySymbols 方法的捕捉器。</td></tr><tr><td align="center">handler.apply()</td><td align="center">函数调用操作的捕捉器。</td></tr><tr><td align="center">handler.construct()</td><td align="center">new 操作符的捕捉器</td></tr></tbody></table><h3 id="可撤销的Proxy对象"><a href="#可撤销的Proxy对象" class="headerlink" title="可撤销的Proxy对象"></a>可撤销的<code>Proxy</code>对象</h3><p><code>Proxy.revocable()</code> 方法可以用来创建一个可撤销的代理对象。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Proxy</span>.<span class="title function_">revocable</span>(target, handler);</span><br></pre></td></tr></table></figure><ul><li>target 将用 <code>Proxy</code> 封装的目标对象。可以是任何类型的对象，包括原生数组，函数，甚至可以是另外一个代理对象。</li><li>handler 一个对象，其属性是一批可选的函数，这些函数定义了对应的操作被执行时代理的行为。</li></ul><p>该方法的返回值是一个对象，其结构为： <code>&#123;&quot;proxy&quot;: proxy, &quot;revoke&quot;: revoke&#125;</code>，其中：</p><ul><li>proxy表示新生成的代理对象本身，和用一般方式 <code>new Proxy(target, handler)</code> 创建的代理对象没什么不同，只是它可以被撤销掉。</li><li>revoke 撤销方法，调用的时候不需要加任何参数，就可以撤销掉和它一起生成的那个代理对象。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span> &#125;;</span><br><span class="line">            <span class="keyword">const</span> &#123; proxy, revoke &#125; = <span class="title class_">Proxy</span>.<span class="title function_">revocable</span>(obj, &#123;&#125;);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">name</span>); <span class="comment">// &#x27;张三&#x27;</span></span><br><span class="line">            <span class="title function_">revoke</span>(); <span class="comment">// 关闭代理</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">name</span>); <span class="comment">// error</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios的封装</title>
      <link href="/2022/05/20/Axios%E7%9A%84%E5%B0%81%E8%A3%85/"/>
      <url>/2022/05/20/Axios%E7%9A%84%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Axios封装"><a href="#Axios封装" class="headerlink" title="Axios封装"></a>Axios封装</h2><h3 id="Axios-是一个基于-promise-的-HTTP-库，可以用在浏览器和-node-js-中。"><a href="#Axios-是一个基于-promise-的-HTTP-库，可以用在浏览器和-node-js-中。" class="headerlink" title="Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。"></a>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</h3><h3 id="使用npm"><a href="#使用npm" class="headerlink" title="使用npm"></a>使用npm</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure><h3 id="使用-bower"><a href="#使用-bower" class="headerlink" title="使用 bower:"></a>使用 bower:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ bower install axios</span><br></pre></td></tr></table></figure><h3 id="使用-cdn"><a href="#使用-cdn" class="headerlink" title="使用 cdn:"></a>使用 cdn:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="封装为class"><a href="#封装为class" class="headerlink" title="封装为class"></a>封装为class</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//request.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> type &#123; <span class="title class_">AxiosInstance</span>, <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Request</span> &#123;</span><br><span class="line">    <span class="attr">instance</span>: <span class="title class_">AxiosInstance</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">options: AxiosRequestConfig</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span> = axios.<span class="title function_">create</span>(options);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">            <span class="function">(<span class="params">res: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="attr">token</span>: string = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;Authorization&#x27;</span>) || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (token) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = token;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全局请求拦截器&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params">err: any</span>) =&gt;</span> err</span><br><span class="line">        );</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">            <span class="comment">// 因为我们接口的数据都在res.data下，所以我们直接返回res.data</span></span><br><span class="line">            <span class="function">(<span class="params">res: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全局响应拦截器&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params">err: any</span>) =&gt;</span> err</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    request&lt;T&gt;(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>&lt;T&gt;): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;T&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">instance</span></span><br><span class="line">                .<span class="property">request</span>&lt;any, T&gt;(config)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(res);</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(err);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Request</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实例化class"><a href="#实例化class" class="headerlink" title="实例化class"></a>实例化class</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Request</span> <span class="keyword">from</span> <span class="string">&#x27;./request&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> http = <span class="keyword">new</span> <span class="title class_">Request</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_BASE_URL</span> <span class="keyword">as</span> string,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">5</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> params = &#123;</span><br><span class="line">        <span class="attr">limit</span>: <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> http.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/search&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        params</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大子数组和</title>
      <link href="/2022/04/19/leetcode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
      <url>/2022/04/19/leetcode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="leetcode-53：最大子数组和"><a href="#leetcode-53：最大子数组和" class="headerlink" title="leetcode  53：最大子数组和"></a>leetcode  53：最大子数组和</h3><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<strong>子数组</strong> 是数组中的一个连续部分</p><p><strong>示例 1：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：nums = [-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：连续子数组 [<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>] 的和最大，为 <span class="number">6</span> 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">输出：<span class="number">23</span></span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">var</span> maxSubArray = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">     <span class="keyword">let</span> max = nums[<span class="number">0</span>];</span><br><span class="line">     <span class="keyword">let</span> maxSum = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         maxSum = <span class="title class_">Math</span>.<span class="title function_">max</span>(nums[i], maxSum + nums[i]);</span><br><span class="line">         max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max, maxSum);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> max;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode 119:杨辉三角II</title>
      <link href="/2022/04/19/leetCode-119-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92II/"/>
      <url>/2022/04/19/leetCode-119-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92II/</url>
      
        <content type="html"><![CDATA[<h3 id="leetcode-119：杨辉三角II"><a href="#leetcode-119：杨辉三角II" class="headerlink" title="leetcode 119：杨辉三角II"></a>leetcode 119：杨辉三角II</h3><p>给定一个非负索引 <code>rowIndex</code>，返回「杨辉三角」的第 <code>rowIndex</code> 行。在「杨辉三角」中，每个数是它左上方和右上方的数的和</p><p><img src="/images/pascal-triangle.gif" alt="pascal-triangle"></p><p><strong>示例 1:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入: rowIndex = <span class="number">3</span></span><br><span class="line">输出: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入: rowIndex = <span class="number">0</span></span><br><span class="line">输出: [<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入: rowIndex = <span class="number">1</span></span><br><span class="line">输出: [<span class="number">1</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">rowIndex</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> getRow = <span class="keyword">function</span> (<span class="params">rowIndex</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= rowIndex; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> row = <span class="keyword">new</span> <span class="title class_">Array</span>(i + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">                row[j] = res[i - <span class="number">1</span>][j - <span class="number">1</span>] + res[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="title function_">push</span>(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res[rowIndex];</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode 509:斐波那契数列</title>
      <link href="/2022/04/19/leetCode-509-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
      <url>/2022/04/19/leetCode-509-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="leetcode-509：斐波那契数列"><a href="#leetcode-509：斐波那契数列" class="headerlink" title="leetcode 509：斐波那契数列"></a>leetcode 509：斐波那契数列</h3><p><strong>斐波那契数</strong> （通常用 <code>F(n)</code> 表示）形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 <code>0</code> 和 <code>1</code> 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">F</span>(<span class="number">0</span>) = <span class="number">0</span>，<span class="title function_">F</span>(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line"><span class="title function_">F</span>(n) = <span class="title function_">F</span>(n - <span class="number">1</span>) + <span class="title function_">F</span>(n - <span class="number">2</span>)，其中 n &gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：<span class="title function_">F</span>(<span class="number">2</span>) = <span class="title function_">F</span>(<span class="number">1</span>) + <span class="title function_">F</span>(<span class="number">0</span>) = <span class="number">1</span> + <span class="number">0</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：<span class="title function_">F</span>(<span class="number">3</span>) = <span class="title function_">F</span>(<span class="number">2</span>) + <span class="title function_">F</span>(<span class="number">1</span>) = <span class="number">1</span> + <span class="number">1</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">4</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：<span class="title function_">F</span>(<span class="number">4</span>) = <span class="title function_">F</span>(<span class="number">3</span>) + <span class="title function_">F</span>(<span class="number">2</span>) = <span class="number">2</span> + <span class="number">1</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> fib = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fib</span>(n - <span class="number">1</span>) + <span class="title function_">fib</span>(n - <span class="number">2</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode 1646:获取生成数组中的最大值</title>
      <link href="/2022/04/19/leetCode-1646-%E8%8E%B7%E5%8F%96%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
      <url>/2022/04/19/leetCode-1646-%E8%8E%B7%E5%8F%96%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h3 id="leetcode-1646-获取生成数组中的最大值"><a href="#leetcode-1646-获取生成数组中的最大值" class="headerlink" title="leetcode 1646:获取生成数组中的最大值"></a>leetcode 1646:获取生成数组中的最大值</h3><p>给你一个整数 <code>n</code> 。按下述规则生成一个长度为 <code>n + 1</code> 的数组 <code>nums</code> ：返回生成数组 <code>nums</code> 中的 <strong>最大</strong> 值。</p><p><strong>示例 1：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">7</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：根据规则：</span><br><span class="line">  nums[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">  nums[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">  nums[(<span class="number">1</span> * <span class="number">2</span>) = <span class="number">2</span>] = nums[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">  nums[(<span class="number">1</span> * <span class="number">2</span>) + <span class="number">1</span> = <span class="number">3</span>] = nums[<span class="number">1</span>] + nums[<span class="number">2</span>] = <span class="number">1</span> + <span class="number">1</span> = <span class="number">2</span></span><br><span class="line">  nums[(<span class="number">2</span> * <span class="number">2</span>) = <span class="number">4</span>] = nums[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">  nums[(<span class="number">2</span> * <span class="number">2</span>) + <span class="number">1</span> = <span class="number">5</span>] = nums[<span class="number">2</span>] + nums[<span class="number">3</span>] = <span class="number">1</span> + <span class="number">2</span> = <span class="number">3</span></span><br><span class="line">  nums[(<span class="number">3</span> * <span class="number">2</span>) = <span class="number">6</span>] = nums[<span class="number">3</span>] = <span class="number">2</span></span><br><span class="line">  nums[(<span class="number">3</span> * <span class="number">2</span>) + <span class="number">1</span> = <span class="number">7</span>] = nums[<span class="number">3</span>] + nums[<span class="number">4</span>] = <span class="number">2</span> + <span class="number">1</span> = <span class="number">3</span></span><br><span class="line">因此，nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]，最大值 <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：根据规则，nums[<span class="number">0</span>]、nums[<span class="number">1</span>] 和 nums[<span class="number">2</span>] 之中的最大值是 <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：根据规则，nums[<span class="number">0</span>]、nums[<span class="number">1</span>]、nums[<span class="number">2</span>] 和 nums[<span class="number">3</span>] 之中的最大值是 <span class="number">2</span></span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getMaximumGenerated = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> nums = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> min = <span class="title class_">Math</span>.<span class="title function_">floor</span>(i / <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">let</span> max = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(i / <span class="number">2</span>);</span><br><span class="line">                nums[i] = nums[min] + nums[max];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[i] = nums[i / <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...nums);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode 118:杨辉三角</title>
      <link href="/2022/04/19/leetCode-118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
      <url>/2022/04/19/leetCode-118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<h3 id="leetcode-118-杨辉三角"><a href="#leetcode-118-杨辉三角" class="headerlink" title="leetcode 118:杨辉三角"></a>leetcode 118:杨辉三角</h3><p>给定一个非负整数 <em><code>numRows</code>，</em>生成「杨辉三角」的前 <em><code>numRows</code></em> 行。在「杨辉三角」中，每个数是它左上方和右上方的数的和。</p><p><img src="/images/pascal-triangle.gif" alt="pascal-triangle"></p><p><strong>示例 1:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入: numRows = <span class="number">5</span></span><br><span class="line">输出: [[<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入: numRows = <span class="number">1</span></span><br><span class="line">输出: [[<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p><strong>代码实现</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">numRows</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> generate = <span class="keyword">function</span>(<span class="params">numRows</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> res = []</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">          <span class="comment">//将内部数组全部填充1</span></span><br><span class="line">        <span class="keyword">let</span> row = <span class="keyword">new</span> <span class="title class_">Array</span>(i + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">          row[j] = res[i - <span class="number">1</span>][j - <span class="number">1</span>] + res[i - <span class="number">1</span>][j]</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">push</span>(row)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode 70:爬楼梯</title>
      <link href="/2022/04/19/leetCode-70-%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
      <url>/2022/04/19/leetCode-70-%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="leetcode-70-爬楼梯"><a href="#leetcode-70-爬楼梯" class="headerlink" title="leetcode 70:爬楼梯"></a><code>leetcode</code> 70:爬楼梯</h3><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>示例 1：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line"><span class="number">1.</span> <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span> <span class="number">2</span> 阶</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line"><span class="number">1.</span> <span class="number">1</span> 阶 + <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span> <span class="number">1</span> 阶 + <span class="number">2</span> 阶</span><br><span class="line"><span class="number">3.</span> <span class="number">2</span> 阶 + <span class="number">1</span> 阶</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> res=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line">       res[i]=res[i-<span class="number">1</span>]+res[i-<span class="number">2</span>]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res[n-<span class="number">1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pinia</title>
      <link href="/2022/04/19/Pinia%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/19/Pinia%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue全局状态管理：Pinia"><a href="#Vue全局状态管理：Pinia" class="headerlink" title="Vue全局状态管理：Pinia"></a>Vue全局状态管理：Pinia</h1><h2 id="一、为什么要使用-Pinia？"><a href="#一、为什么要使用-Pinia？" class="headerlink" title="一、为什么要使用 Pinia？"></a>一、为什么要使用 Pinia？</h2><h3 id="Pinia-是-Vue-的存储库，它允许您跨组件-x2F-页面共享状态。"><a href="#Pinia-是-Vue-的存储库，它允许您跨组件-x2F-页面共享状态。" class="headerlink" title="Pinia 是 Vue 的存储库，它允许您跨组件&#x2F;页面共享状态。"></a>Pinia 是 Vue 的存储库，它允许您跨组件&#x2F;页面共享状态。</h3><ol><li>开发工具支持    <ol><li>跟踪动作、突变的时间表</li><li>商店出现在使用它们的组件中</li><li>时间旅行和更容易的调试</li></ol></li><li>热模块更换  <ol><li>在不重新加载页面的情况下修改您的商店</li><li>在开发时保持任何现有状态</li></ol></li><li>使用插件扩展 Pinia 功能</li><li>为 JS 用户提供适当的 TypeScript 支持或自动完成功能</li><li>服务器端渲染支持</li></ol><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yarn add pinia</span><br><span class="line"># or <span class="keyword">with</span> npm</span><br><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br></pre></td></tr></table></figure><p>如果您使用的是 Vue 2，您还需要安装一个插件并在<code>pinia</code>应用程序的根目录注入创建的插件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia, <span class="title class_">PiniaVuePlugin</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">PiniaVuePlugin</span>)</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"> multiple <span class="title class_">Vue</span> apps on</span><br><span class="line">  pinia,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><p>在使用之前我们应该知道并非所有应用程序都需要访问全局状态。存储应该包含可以在整个应用程序中访问的数据。这包括在许多地方使用的数据，例如在导航栏中显示的用户信息，以及需要通过页面保存的数据。</p><ol><li><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><p>Store 是一个保存状态和业务逻辑的实体，可以自由读取和写入，并通过导入后在 setup 中使用</p><ol><li><h4 id="创建一个-store"><a href="#创建一个-store" class="headerlink" title="创建一个 store"></a>创建一个 store</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia</span></span><br><span class="line"><span class="string">const useCounterStore = defineStore(&#x27;</span>counterStore<span class="string">&#x27;, &#123;</span></span><br><span class="line"><span class="string">  state: () =&gt; (&#123;</span></span><br><span class="line"><span class="string">    counter: </span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure></li><li><h4 id="在其他页面使用Store"><a href="#在其他页面使用Store" class="headerlink" title="在其他页面使用Store"></a>在其他页面使用Store</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">//*** 代表此处你本地文件的路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">useCounterStore</span>()</span><br><span class="line"><span class="comment">// 此处可以通过解构赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123;counter&#125;=store</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="重置Store"><a href="#重置Store" class="headerlink" title="重置Store"></a>重置Store</h4><p>您可以通过调用store 上的方法将状态<em>重置</em>为其初始值：<code>$reset()</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">//*** 代表此处你本地文件的路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">useCounterStore</span>()</span><br><span class="line">store.$reset()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="更新Store"><a href="#更新Store" class="headerlink" title="更新Store"></a>更新Store</h4><ol><li><p>直接更改store的属性    </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">//*** 代表此处你本地文件的路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">useCounterStore</span>()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;()=&gt;&#123;store.counter++&#125;&#x27;</span>&gt;</span>点击改变counter<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>通过$patch方法</p><p>接收对象的方式允许对部分对象同时应用多个更改：但是，使用这种语法应用某些突变确实很难或成本很高：任何集合修改（例如，从数组中推送、删除、拼接元素）都需要创建一个新集合。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">//*** 代表此处你本地文件的路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">useCounterStore</span>()</span><br><span class="line">store.$patch(&#123;</span><br><span class="line">  <span class="attr">counter</span>: store.<span class="property">counter</span> + <span class="number">1</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收函数的方式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">//*** 代表此处你本地文件的路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">useCounterStore</span>()</span><br><span class="line">store.$patch(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">state.<span class="property">items</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;shoes&#x27;</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;)</span><br><span class="line">state.<span class="property">hasChanged</span> = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="更换state"><a href="#更换state" class="headerlink" title="更换state"></a>更换state</h4></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">//*** 代表此处你本地文件的路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">useCounterStore</span>()</span><br><span class="line">store.<span class="property">$state</span> = &#123; <span class="attr">counter</span>: <span class="number">666</span>, <span class="attr">name</span>: <span class="string">&#x27;Paimon&#x27;</span> &#125;</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure></li><li><h3 id="使用Getters"><a href="#使用Getters" class="headerlink" title="使用Getters"></a>使用Getters</h3><ol><li>Getter 完全等同于 Store 状态的计算值。 它们可以用 <code>defineStore()</code> 中的 <code>getters</code> 属性定义。 他们接收“状态”作为第一个参数</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">counter</span> * <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><h4 id="使用其他-getter"><a href="#使用其他-getter" class="headerlink" title="使用其他 getter"></a>使用其他 getter</h4></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 自动将返回类型推断为数字</span></span><br><span class="line">    <span class="title function_">doubleCount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">counter</span> * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 返回类型必须明确设置</span></span><br><span class="line">    <span class="title function_">doublePlusOne</span>(): number &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">counter</span> * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在模板中使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Double count is &#123;&#123; store.doubleCount &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123; store &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4></li></ol><p>Getters 只是幕后的 computed 属性，因此无法向它们传递任何参数。 但是，您可以从 getter返回一个函数以接受任何参数：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">getUserById</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">userId</span>) =&gt;</span> state.<span class="property">users</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">id</span> === userId)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在模板中使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">getUserById</span>: store.<span class="property">getUserById</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>User 2: &#123;&#123; getUserById(2) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><h3 id="使用Actions"><a href="#使用Actions" class="headerlink" title="使用Actions"></a>使用Actions</h3><p>Actions 相当于组件中的方法，它们可以使用 <code>defineStore()</code> 中的 <code>actions</code> 属性定义并且它们非常适合定义业务逻辑。与getters一样，操作可以通过 this访问并且actions可以是异步的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">counter</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">randomizeCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">counter</span> = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">100</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="keyword">async</span> <span class="title function_">registerUser</span>(<span class="params">login, password</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userData</span> = <span class="keyword">await</span> api.<span class="title function_">post</span>(&#123; login, password &#125;)</span><br><span class="line">        <span class="title function_">showTooltip</span>(<span class="string">`Welcome back <span class="subst">$&#123;<span class="variable language_">this</span>.userData.name&#125;</span>!`</span>)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="title function_">showTooltip</span>(error)</span><br><span class="line">        <span class="comment">// 让表单组件显示错误</span></span><br><span class="line">        <span class="keyword">return</span> error</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在模板中使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span><br><span class="line">    store.<span class="title function_">randomizeCounter</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pinia </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
